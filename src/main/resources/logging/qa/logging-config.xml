<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--
        Do ustawienia na swoją nazwę aplikacji
    -->
    <property name="log.file.name" value="pap-qa"/>
    <!--
        Do ustawienia na inny katalog jeżeli to konieczne
    -->
    <property name="log.directory" value="app-logs"/>

    <appender name="Console"
              class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--
                Tutaj określamy format zapisu pojedynczego logu.
                Więcej: https://logback.qos.ch/manual/layouts.html
                "%black", "%red", "%green","%yellow","%blue", "%magenta","%cyan", "%white",
                "%gray", "%boldRed","%boldGreen", "%boldYellow", "%boldBlue", "%boldMagenta"
                "%boldCyan", "%boldWhite" and "%highlight"
                p / le / level	Outputs the level of the logging event.
                %d  date (You can specify the string "ISO8601" for the ISO8601 date format)
                n	Outputs the platform dependent line separator character or characters.
                t / thread	Outputs the name of the thread that generated the logging event
                C{length} / class{length} Outputs the fully-qualified class name of the caller issuing the logging request.
                m / msg / message	Outputs the application-supplied message associated with the logging event.
                M / method	Outputs the method name where the logging request was issued.
                F / file Outputs the file name of the Java source file where the logging request was issued.
                c{length} / lo{length} / logger{length} Outputs the name of the logger at the origin of the logging event.
                r / relative	Outputs the number of milliseconds elapsed since the start of the application until the creation of the logging event.


            -->
            <Pattern>
                %magenta(%d{ISO8601}) %highlight(%-5level) [%green(%t)] %blue(%C{1.}): %msg%n%throwable
            </Pattern>
        </layout>
    </appender>
    <appender name="RollingFile"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
            Tutaj ustalamy nazwę naszego pliku z logami (podstawowego)
            i miejsce jego utworzenia
            Przyjmujemy, że logi będą zapisywane w katalogu domowym użytkownika,
            który uruchomił aplikację.

            p / le / level	Outputs the level of the logging event.
            %d  date (You can specify the string "ISO8601" for the ISO8601 date format)
            n	Outputs the platform dependent line separator character or characters.
            t / thread	Outputs the name of the thread that generated the logging event
            C{length} / class{length} Outputs the fully-qualified class name of the caller issuing the logging request.
            m / msg / message	Outputs the application-supplied message associated with the logging event.
            M / method	Outputs the method name where the logging request was issued.
            F / file Outputs the file name of the Java source file where the logging request was issued.
            c{length} / lo{length} / logger{length} Outputs the name of the logger at the origin of the logging event.
            r / relative	Outputs the number of milliseconds elapsed since the start of the application until the creation of the logging event.
        -->
        <file>${user.home}/${log.directory}/${log.file.name}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%M %F %c{0} %r %d %p %C{1.} [%t] %m%n</Pattern>
        </encoder>
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                Pliki z logami archiwalnymi będą umieszczane w katalogu logs.
                Katalog logs powstanie automatycznie
            -->
            <fileNamePattern>${user.home}/${log.directory}/archive/${log.file.name}-%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--
                    Kiedy plik z logami przekroczy 10 MB to zostanie przeniesiony
                    do katalogu logs pod nową zmianą, a nowe logi będą pisane
                    do nowego pliku log.log
                -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>
    <!--
        Tutaj określamy domyślny poziom logowania aplikacji.
        Wszystkie nieskonfigurowane pakiety/klasy będą miały właśnie taki
    -->
    <root level="warn">
        <!--
            Określamy, że domyślnie logi pojawiają się i w konsoli i w pliku
        -->
        <appender-ref ref="RollingFile"/>
        <appender-ref ref="Console"/>
    </root>
    <!--
        Jeżeli chcemy własne poziomy logowania, to dodajemy je w ten sposób
    -->
    <logger name="com.example.paginationandprojection" level="info" additivity="false">
        <appender-ref ref="RollingFile"/>
        <appender-ref ref="Console"/>
    </logger>
    <logger name="com.example.paginationandprojection.startup" level="debug" additivity="false">
        <appender-ref ref="RollingFile"/>
        <appender-ref ref="Console"/>
    </logger>
</configuration>